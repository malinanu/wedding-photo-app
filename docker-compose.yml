services:
  postgres:
    image: postgres:17-alpine
    container_name: wedding_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: wedding_photos
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - wedding_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: wedding_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - wedding_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wedding_app
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      # Database
      DATABASE_URL: "postgresql://urlshortener:password@postgres:5432/wedding_photos?schema=public"
      
      # NextAuth
      NEXTAUTH_URL: "http://localhost:3002"
      NEXTAUTH_SECRET: "ngUe5dV76MA2259hoGHeVLtA6c9mpWzsXKxM7A68p4pk2YN2a%A2"
      
      # App Configuration
      NEXT_PUBLIC_APP_URL: "http://localhost:3002"
      NEXT_PUBLIC_MAX_UPLOAD_SIZE: "10485760"
      NEXT_PUBLIC_CHUNK_SIZE: "5242880"
      
      # Google Cloud Storage
      GCS_PROJECT_ID: "canvas-provider-468417-n9"
      GCS_BUCKET_NAME: "3logiq-wedding-photos-bucket"
      GCS_KEY_FILE: "/app/canvas-provider-468417-n9-558228f5ca25.json"
      GCS_CLIENT_EMAIL: "weddingphotos@canvas-provider-468417-n9.iam.gserviceaccount.com"
      
      # Text.lk SMS Gateway
      TEXTLK_API_TOKEN: "1147|MIswpUjkEurjQLNN1AiITWZEA0USeoOJywP2VFSF929b958b"
      TEXTLK_SENDER_ID: "3logiq com"
      
      # Redis
      REDIS_URL: "redis://redis:6379"
      
      # Node environment
      NODE_ENV: "production"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wedding_network
    volumes:
      - ./uploads:/app/uploads
      - ./canvas-provider-468417-n9-558228f5ca25.json:/app/canvas-provider-468417-n9-558228f5ca25.json:ro

  # Optional: Nginx reverse proxy
  # Uncomment this section if you want to use nginx as a reverse proxy
  # Make sure nginx.conf exists as a file (not a directory)
  # nginx:
  #   image: nginx:alpine
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     # Create ssl directory with certificates before uncommenting
  #     # - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - app
  #   networks:
  #     - wedding_network

volumes:
  postgres_data:
  redis_data:

networks:
  wedding_network:
    driver: bridge
